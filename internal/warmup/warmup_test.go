package warmup

import (
	"os"
	"path/filepath"
	"testing"
)

func TestPerform_EmptyDirectory(t *testing.T) {
	tempDir := t.TempDir()
	
	err := Perform(tempDir)
	if err != nil {
		t.Errorf("Perform failed on empty directory: %v", err)
	}
}

func TestPerform_NonExistentDirectory(t *testing.T) {
	err := Perform("/non/existent/directory")
	// Perform函数对于不存在的目录不会返回错误，
	// 因为它只是检查不到任何项目类型而返回nil
	if err != nil {
		t.Logf("Perform on non-existent directory returned: %v", err)
	}
}

func TestPerform_WithPackageJson(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建package.json文件
	packageJsonContent := `{
  "name": "test-project",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "^4.17.21"
  }
}`
	
	packageJsonPath := filepath.Join(tempDir, "package.json")
	err := os.WriteFile(packageJsonPath, []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	// 测试warmup（可能会失败因为没有npm，但不应该panic）
	err = Perform(tempDir)
	// 不检查错误，因为npm可能不存在，这是正常的
	t.Logf("Perform with package.json result: %v", err)
}

func TestPerform_WithYarnLock(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建yarn.lock文件
	yarnLockContent := `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

lodash@^4.17.21:
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz"
`
	
	yarnLockPath := filepath.Join(tempDir, "yarn.lock")
	err := os.WriteFile(yarnLockPath, []byte(yarnLockContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create yarn.lock: %v", err)
	}
	
	// 也创建package.json
	packageJsonContent := `{
  "name": "test-project",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "^4.17.21"
  }
}`
	
	packageJsonPath := filepath.Join(tempDir, "package.json")
	err = os.WriteFile(packageJsonPath, []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	// 测试warmup（可能会失败因为没有yarn，但不应该panic）
	err = Perform(tempDir)
	// 不检查错误，因为yarn可能不存在，这是正常的
	t.Logf("Perform with yarn.lock result: %v", err)
}

func TestPerform_WithGoMod(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建go.mod文件
	goModContent := `module test-project

go 1.21

require (
	github.com/sirupsen/logrus v1.9.0
)
`
	
	goModPath := filepath.Join(tempDir, "go.mod")
	err := os.WriteFile(goModPath, []byte(goModContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create go.mod: %v", err)
	}
	
	// 测试warmup
	err = Perform(tempDir)
	if err != nil {
		t.Logf("Perform with go.mod failed (expected if go not available): %v", err)
	}
}

func TestPerform_WithRequirementsTxt(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建requirements.txt文件
	requirementsContent := `requests==2.28.1
numpy==1.23.5
pandas==1.5.2
`
	
	requirementsPath := filepath.Join(tempDir, "requirements.txt")
	err := os.WriteFile(requirementsPath, []byte(requirementsContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create requirements.txt: %v", err)
	}
	
	// 测试warmup（可能会失败因为没有pip，但不应该panic）
	err = Perform(tempDir)
	// 不检查错误，因为pip可能不存在，这是正常的
	t.Logf("Perform with requirements.txt result: %v", err)
}

func TestPerform_WithCargoToml(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建Cargo.toml文件
	cargoContent := `[package]
name = "test-project"
version = "0.1.0"
edition = "2021"

[dependencies]
serde = "1.0"
`
	
	cargoPath := filepath.Join(tempDir, "Cargo.toml")
	err := os.WriteFile(cargoPath, []byte(cargoContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create Cargo.toml: %v", err)
	}
	
	// 测试warmup（可能会失败因为没有cargo，但不应该panic）
	err = Perform(tempDir)
	// 不检查错误，因为cargo可能不存在，这是正常的
	t.Logf("Perform with Cargo.toml result: %v", err)
}

func TestPerform_MultipleProjectTypes(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建多种项目文件
	packageJsonContent := `{"name": "test", "dependencies": {"lodash": "^4.0.0"}}`
	goModContent := `module test
go 1.21
`
	
	err := os.WriteFile(filepath.Join(tempDir, "package.json"), []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	err = os.WriteFile(filepath.Join(tempDir, "go.mod"), []byte(goModContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create go.mod: %v", err)
	}
	
	// 测试warmup（应该检测到Go项目并优先执行）
	err = Perform(tempDir)
	// 不严格检查错误，因为命令可能不存在
	t.Logf("Perform with multiple project types result: %v", err)
}

func TestIsGoProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 测试没有go.mod的目录
	if isGoProject(tempDir) {
		t.Error("isGoProject should return false for directory without go.mod")
	}
	
	// 创建go.mod文件
	goModContent := `module test
go 1.21
`
	
	err := os.WriteFile(filepath.Join(tempDir, "go.mod"), []byte(goModContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create go.mod: %v", err)
	}
	
	// 测试有go.mod的目录
	if !isGoProject(tempDir) {
		t.Error("isGoProject should return true for directory with go.mod")
	}
}

func TestIsNodeProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 测试没有package.json的目录
	if isNodeProject(tempDir) {
		t.Error("isNodeProject should return false for directory without package.json")
	}
	
	// 创建package.json文件
	packageJsonContent := `{"name": "test"}`
	
	err := os.WriteFile(filepath.Join(tempDir, "package.json"), []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	// 测试有package.json的目录
	if !isNodeProject(tempDir) {
		t.Error("isNodeProject should return true for directory with package.json")
	}
}

func TestIsPythonProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 测试没有requirements.txt的目录
	if isPythonProject(tempDir) {
		t.Error("isPythonProject should return false for directory without requirements.txt")
	}
	
	// 创建requirements.txt文件
	requirementsContent := `requests==2.28.1`
	
	err := os.WriteFile(filepath.Join(tempDir, "requirements.txt"), []byte(requirementsContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create requirements.txt: %v", err)
	}
	
	// 测试有requirements.txt的目录
	if !isPythonProject(tempDir) {
		t.Error("isPythonProject should return true for directory with requirements.txt")
	}
}

func TestIsRustProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 测试没有Cargo.toml的目录
	if isRustProject(tempDir) {
		t.Error("isRustProject should return false for directory without Cargo.toml")
	}
	
	// 创建Cargo.toml文件
	cargoContent := `[package]
name = "test"
version = "0.1.0"
`
	
	err := os.WriteFile(filepath.Join(tempDir, "Cargo.toml"), []byte(cargoContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create Cargo.toml: %v", err)
	}
	
	// 测试有Cargo.toml的目录
	if !isRustProject(tempDir) {
		t.Error("isRustProject should return true for directory with Cargo.toml")
	}
}

func TestWarmUpWithYarn_ValidProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建必要的文件
	packageJsonContent := `{"name": "test", "dependencies": {"lodash": "^4.0.0"}}`
	yarnLockContent := `# yarn lockfile v1`
	
	err := os.WriteFile(filepath.Join(tempDir, "package.json"), []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	err = os.WriteFile(filepath.Join(tempDir, "yarn.lock"), []byte(yarnLockContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create yarn.lock: %v", err)
	}
	
	err = warmUpWithYarn(tempDir)
	// 可能失败但不应该panic
	t.Logf("warmUpWithYarn result: %v", err)
}

func TestWarmUpWithNpm_ValidProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建package.json
	packageJsonContent := `{"name": "test", "dependencies": {"lodash": "^4.0.0"}}`
	
	err := os.WriteFile(filepath.Join(tempDir, "package.json"), []byte(packageJsonContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create package.json: %v", err)
	}
	
	err = warmUpWithNpm(tempDir)
	// 可能失败但不应该panic
	t.Logf("warmUpWithNpm result: %v", err)
}

func TestWarmUpGo_ValidProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建go.mod
	goModContent := `module test
go 1.21
`
	
	err := os.WriteFile(filepath.Join(tempDir, "go.mod"), []byte(goModContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create go.mod: %v", err)
	}
	
	err = warmUpGo(tempDir)
	// 可能失败但不应该panic
	t.Logf("warmUpGo result: %v", err)
}

func TestWarmUpPython_ValidProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建requirements.txt
	requirementsContent := `requests==2.28.1`
	
	err := os.WriteFile(filepath.Join(tempDir, "requirements.txt"), []byte(requirementsContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create requirements.txt: %v", err)
	}
	
	err = warmUpPython(tempDir)
	// 可能失败但不应该panic
	t.Logf("warmUpPython result: %v", err)
}

func TestWarmUpRust_ValidProject(t *testing.T) {
	tempDir := t.TempDir()
	
	// 创建Cargo.toml
	cargoContent := `[package]
name = "test"
version = "0.1.0"
`
	
	err := os.WriteFile(filepath.Join(tempDir, "Cargo.toml"), []byte(cargoContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create Cargo.toml: %v", err)
	}
	
	err = warmUpRust(tempDir)
	// 可能失败但不应该panic
	t.Logf("warmUpRust result: %v", err)
} 